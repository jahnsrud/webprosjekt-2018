{"laborator_custom_css":"\/* ===========================================================\r\nCustom modification only for RESTAURANT Demo - START\r\n=========================================================== *\/\r\n\r\n\/* General: Line Height *\/ \r\nbody, p {\r\n    line-height: 1.7;\r\n}\r\n\r\n\/* General: Title Divider *\/\r\n.title-divider {\r\n\twidth: 80px;\r\n\theight: 18px;\r\n\tmargin: 50px 0px;\r\n\ttext-align: center;\r\n}\r\n\r\n\/* General: Title Divider Center *\/\r\n.title-divider.centered  {\r\n\twidth: 80px;\r\n\theight: 18px;\r\n\tmargin-left:  auto;\r\n\tmargin-right:  auto;\r\n}\r\n\r\n\/* General: Remove Slider Border *\/\r\n.rev_slider audio, \r\n.rev_slider embed, \r\n.rev_slider iframe, \r\n.rev_slider object, \r\n.rev_slider video {\r\n\tborder: none;\r\n}\r\n\r\n\/* General: Titles *\/\r\n.section-title.restaurant-menu,\r\n.section-title.guestbook {\r\n\ttext-align: center;\r\n}\r\n\r\n\/* General: Titles *\/\r\n.section-title {\r\n\tpadding-top: 20px;\r\n}\r\n\r\n\/* General: Sub Title Color *\/\r\n.section-title p {\r\n    color: #777;\r\n}\r\n\r\n\/* Restaurant: Padding top and bottom *\/\r\n.restaurant {\r\n    padding: 50px 0;\r\n}\r\n\r\n\/* Menu: Title *\/\r\n.restaurant-menu h4 {\r\n\tletter-spacing: 3px;\r\n\tmargin-bottom: 20px;\r\n}\r\n\r\n\/* Menu: Meal Tabs Align Center *\/\r\n.restaurant-menu ul {\r\n\ttext-align: center;\r\n}\r\n\r\n\/* Menu: Meal Tabs Hide Underline *\/\r\n.restaurant-menu li a:after {\r\n\tdisplay: none !important;\r\n}\r\n\r\n\/* Menu: Meal Tabs *\/\r\n.restaurant-menu li {\r\n\tborder-bottom: 1px solid #EEE !important;\r\n\tpadding: 10px !important;\r\n\tmargin:0px !important;\r\n} \r\n\r\n\/* Menu: Meal Tabs Active *\/\r\n.restaurant-menu ul li.vc_active {\r\n\tborder-bottom-color: #222 !important;\r\n}\r\n\r\n\/* Menu: Meal Tabs Active Color *\/\r\n.restaurant-menu ul li.vc_active a{\r\n\tcolor: #222 !important;\r\n}\r\n\r\n\/* Menu: Tabs Remove Transition *\/\r\n.wpb-js-composer .vc_tta.restaurant-menu .vc_tta-panel-body {\r\n\ttransition: none !important;\r\n\ttransform: none !important;\r\n}\r\n\r\n\/* Menu: Food Name *\/\r\n.food-list h3 {\r\n\tborder-bottom: 1px dotted #CCC;\r\n\tpadding-bottom: 10px;\r\n}\r\n\r\n\/* Menu: Food Price *\/\r\n.food-list del {\r\n\tposition: absolute;\r\n\ttop: 0;\r\n\tright: 0;\r\n\ttext-decoration: none;\r\n\tcolor: #000;\r\n}\r\n\r\n\/* Menu: Ingredients *\/\r\n.food-list p {\r\n\tpadding-right: 40px;\r\n\tcolor: #888;\r\n}\r\n\r\n\/* Menu: Reserve a Table Button *\/\r\n.vc_btn3:after {\r\n    background-color: transparent !important;\r\n}\r\n\r\n\/* Menu: Spacing *\/\r\n.menu-catalog {\r\n    padding: 25px 25px 0 25px;\r\n}\r\n\r\n\/* Menu: Purchase button *\/\r\n@media screen and (min-width: 768px) {\r\n\t\/* Purchase Theme Button *\/ \r\n\t.special-menu-button a{\r\n\t    -webkit-box-shadow: 0 10px 30px 3px rgba(0,0,0,0.08);\r\n\t    box-shadow: 0 10px 30px 3px rgba(0,0,0,0.08);\r\n\t    -webkit-border-radius: 40px;\r\n\t    -moz-border-radius: 40px;\r\n\t    border-radius: 40px;\r\n\t    padding: 4px 15px;\r\n\t    background: #d09e5b;\r\n\t    color: #fff !important;\r\n\t    margin-left: -15px;\r\n\t}\r\n\t\r\n\t.special-menu-button a:after {\r\n\t    background-color: transparent !important;\r\n\t}\r\n}\r\n\r\n\/* Blog Post: Adding margin between paragraphs and customising the line height *\/\r\n.single-post .post .post-content p {\r\n\tmargin: 15px auto;\r\n\tline-height: 24px;\r\n}\r\n\r\n\/* Blog Post: use \"rounded-single-blog-image\" to make a rounded image inside blog *\/\r\n.rounded-single-blog-image {\r\n\t-webkit-border-radius: 999px;\r\n\t-moz-border-radius: 999px;\r\n\tborder-radius: 999px;\r\n}\r\n\r\n\/* Blog: Blog Post Hide Excerpt *\/\r\n.blog-post-excerpt {\r\n\tdisplay: none;   \r\n}\r\n\r\n\/* Blog: Blog Post *\/\r\n.cuisine-blog .lab-blog-posts .blog-post-entry {\r\n    background: #fff;\r\n    border: none;\r\n}\r\n\r\n\/* Blog: Blog Post Image *\/\r\n.cuisine-blog .lab-blog-posts .blog-post-entry .blog-post-image{\r\n\tpadding-left: 30px;\r\n\tpadding-top: 30px;\r\n\tpadding-right: 30px;\r\n}\r\n\r\n\/* Blog: Show More Button Color *\/\r\n.cuisine-blog .show-more .reveal-button {\r\n    border-color: #eee;\r\n    background-color: #fff;\r\n    border-width: 1px;\r\n}\r\n\r\n\/* Blog: Show More Button Margin *\/\r\n.cuisine-blog .show-more {\r\n    margin-top: 0px;    \r\n}\r\n\r\n\/* Blog: Comment Area *\/\r\n.labeled-textarea-row textarea {\r\n    background-image: linear-gradient(#EEE 1px, transparent 1px);\r\n}\r\n\r\n\/* Sidebar: Search area *\/\r\n.widget.widget_search .search-bar input[name=\"s\"] {\r\n    border: 1px solid #eee;\r\n}\r\n\r\n\/* Chef: Title  *\/\r\n.our-chef .section-title h2 {\r\n\tcolor: #FFF;\r\n\tmargin: 0px;\r\n}\r\n\r\n\/* Chef: Sub-title *\/\r\n.our-chef .section-title p {\r\n    color: #999;\r\n    letter-spacing: 4px;\r\n\tposition: absolute;\r\n\ttop: -35px;\r\n}\r\n\r\n\/* Chef: Signature *\/\r\n.signature {\r\n\twidth: 150px;\r\n\topacity: 0.5;\r\n}\r\n\r\n\/* Chef: Title Divider *\/\r\n.our-chef .title-divider {\r\n\tmargin: 40px 0;\r\n}\r\n\r\n\/* Guestbook: Awards Row *\/\r\n.awards {\r\n    width: 50%;\r\n    margin-left: auto !important;\r\n    margin-right: auto !important;\r\n} \r\n\r\n\/* Guestbook: Awards Image Size *\/\r\n.awards img {\r\n\twidth: 58px;\r\n\theight: auto;\r\n}\r\n\r\n\/* Guestbook: Tripadvisor re-styling *\/\r\n.widget-area--skin-bordered.tripadvisor-rating .widget {\r\n\tpadding: 0px;\r\n\tborder: none;\r\n}\r\n\r\n\/* Guestbook: Tripadvisor re-styling *\/\r\n.widget-area--skin-bordered.tripadvisor-rating .widget .cdsROW a:after {\r\n    background-color: transparent !important;\r\n}\r\n\r\n\/* Guestbook: Tripadvisor re-styling *\/\r\n.widget-area--skin-bordered.tripadvisor-rating .widget .cdsROW.wide {\r\n\tmargin: 0 auto;\r\n\t-webkit-border-radius: 40px;\r\n\t-moz-border-radius: 40px;\r\n\tborder-radius: 50px;\r\n\tpadding: 5px 20px;\r\n\theight: auto;\r\n}\r\n\r\n\/* Guestbook: Tripadvisor re-styling *\/\r\n.widget-area--skin-bordered.tripadvisor-rating .widget .cdsROW.wide .logo {\r\n\tborder: none;\r\n}\r\n\r\n\/* Guestbook: Tripadvisor re-styling *\/\r\n.widget-area--skin-bordered.tripadvisor-rating .widget .cdsLocName {\r\n    max-width: 145px !important;\r\n}\r\n\r\n\/* Guestbook: Tripadvisor re-styling *\/\r\n.widget-area--skin-bordered.tripadvisor-rating .widget .cdsRating {\r\n    padding-left: 12px !important;\r\n}\r\n\r\n\/* Guestbook: Tripadvisor re-styling *\/\r\n.widget-area--skin-bordered.tripadvisor-rating .widget .cdsROW.wide {\r\n    width: 468px !important;\r\n}\r\n\r\n\/* Guestbook: Tripadvisor re-styling *\/\r\n@media screen and (max-width: 768px) {\r\n    .TA_cdsratingsonlywide {\r\n        display: none;\r\n    }\r\n}\r\n\r\n\/* Reserve: Open Table Widget *\/\r\n.open-table-widget {\r\n\tpadding: 0px !important;\r\n\tborder: none !important;\r\n}\r\n\r\n\/* Reserve: Open Table Widget Label *\/\r\n.open-table-widget label {\r\n\tdisplay: block;\r\n}\r\n\r\n\/* Reserve: Open Table Widget Input Spacing *\/\r\n.open-table-widget input {\r\n\tmargin-bottom: 20px;\r\n}\r\n\r\n\/* Reserve: Open Table Widget Remove Copyright *\/\r\n.open-table-widget .powered-by-open-table {\r\n\tdisplay: none;\r\n}\r\n\r\n\/* Reserve: Open Table Widget Reservation Date Input *\/\r\n.open-table-widget .otw-reservation-date {\r\n\twidth: 100%;\r\n\tpadding: 15px;\r\n\tbackground: transparent !important;\r\n}\r\n\r\n\/* Reserve: Open Table Widget Reservation Submit Button *\/\r\n.open-table-widget .otw-submit {\r\n\tborder: none;\r\n\tbackground: #d09e5b;\r\n\tpadding: 10px 15px;\r\n\tmargin-top:20px;\r\n\tcolor: #FFF;\r\n}\r\n\r\n\/* Reserve: Open Table Widget Fields *\/\r\n.open-table-widget .selectric,\r\n.open-table-widget .otw-widget-form-wrap input[type=\"text\"] {\r\n\tbackground: none !important;\r\n\tpadding: 10px;\r\n\theight: auto !important;\r\n\tborder-color: #EEE;\r\n}\r\n\r\n\/* Reserve: Open Table Widget Field Labels *\/\r\n.open-table-widget div.otw-wrapper div.selectric p {\r\n\theight: auto !important;\r\n\tline-height: normal !important;\r\n}\r\n\r\n\/* Reserve: Open Table Widget Button *\/\r\n.open-table-widget .selectric .button {\r\n\tbackground: transparent;\r\n\theight: auto !important;\r\n\tpadding: 21px;\r\n}\r\n\r\n\/* Reserve: Open Table Widget Button Active *\/\r\n.open-table-widget .selectric .button:active {\r\n\tbox-shadow: none;\r\n}\r\n\r\n\/* Reserve: Open Table Widget Dropdown *\/\r\n.open-table-widget .selectric-items {\r\n\tbackground: #FFF !important;\r\n}\r\n\r\n\/* Reserve: Open Table Widget Dropdown Items *\/\r\n.selectric-items li:hover,\r\n.selectric-items li.selected {\r\n\tbackground: #FAFAFA !important;\r\n}\r\n\r\n\/* Reserve: Open Table Widget Datepicker *\/\r\n.open-table-widget-datepicker {\r\n\tbox-shadow: none !important;\r\n\tborder-color: #222 !important;\r\n\tpadding: 10px !important;\r\n}\r\n\r\n\/* Reserve: Open Table Widget Datepicker *\/\r\n.open-table-widget-datepicker.datepicker-top-left:before, \r\n.open-table-widget-datepicker.datepicker-top-right:before {\r\n\tborder-bottom-color: #222 !important;\r\n}\r\n\r\n\/* Blog: Title Alignment *\/\r\n.cuisine-title {\r\n    text-align: center;   \r\n}\r\n\r\n\/* Gallery: Blur Settings *\/\r\n.vc_grid-item-mini.vc_is-hover .vc_gitem-animate-blurOut .vc_gitem-zone-a, \r\n.vc_grid-item-mini.vc_is-hover .vc_gitem-animate-blurScaleOut .vc_gitem-zone-a {\r\n    -webkit-filter: blur(1px);\r\n    -moz-filter: blur(1px);\r\n    -ms-filter: blur(1px);\r\n    filter: blur(1px);\r\n}\r\n\r\n\/* Gallery: Scale Settings *\/\r\n.vc_gitem-animate-blurScaleOut .vc_gitem-zone-a {\r\n    -webkit-transform: scale(1.03);\r\n    -ms-transform: scale(1.03);\r\n    -o-transform: scale(1.03);\r\n    transform: scale(1.03);\r\n}\r\n\r\n\/* Footer: Widget Text Align *\/\r\n.footer--widgets .widget {\r\n\ttext-align: left;\r\n}\r\n\r\n\/* Footer: Background Decoration Image *\/\r\nfooter.site-footer {\r\n    background: #222 url(https:\/\/demo.kaliumtheme.com\/restaurant\/wp-content\/uploads\/2017\/08\/sushivogel.png) no-repeat 118% 140% !important;\r\n    background-size: 600px auto !important;\r\n}\r\n\r\n\/* Footer: Social Networks Icons *\/\r\n.site-footer .social-networks.rounded li a {\r\n\twidth: 35px;\r\n\theight: 35px;\r\n\tbackground: transparent;\r\n\tmargin-right: 0px !important;\r\n}\r\n\r\n\/* Footer: Social Networks Icon Color *\/\r\n.site-footer .social-networks.rounded li a i {\r\n\tcolor: #FFF !important;\r\n}\r\n\r\n\/* Footer: Paragraph Color *\/\r\n.site-footer .footer-widgets .widget .textwidget, .site-footer .footer-widgets .widget p {\r\n\tcolor: #888 !important;\r\n}\r\n\r\n\/* Footer: Widgets Margin *\/\r\n.site-footer .footer-widgets {\r\n\tmargin-top: 80px;\r\n\tmargin-bottom: 70px;\r\n}\r\n\r\n\/* Footer: Hides the horizontal separator line on the footer *\/\r\n.site-footer.site-footer-inverted hr {\r\n\tdisplay: none;\r\n}\r\n\r\n\/* Footer: Working Hours *\/\r\n.working-hours li span {\r\n\tcolor: #FFF;\r\n\tfloat: right;\r\n\tline-height: 1.7;\r\n}\r\n\r\n\/* Footer: Working Hours Right Alignment *\/\r\n.widget.widget_custom_html:nth-child(3) {\r\n\twidth: 25% !important;\r\n\tfloat: right !important;\r\n}\r\n\/* ===========================================================\r\nCustom modification only for RESTAURANT Demo - END\r\n=========================================================== *\/\r\n\r\n\/* ===========================================================\r\nUser CSS modifications\r\n=========================================================== *\/","laborator_custom_css_lg":"","laborator_custom_css_md":"","laborator_custom_css_sm":"","laborator_custom_css_xs":".widget.widget_custom_html:nth-child(3) {\r\n  width: 100% !important;\r\n  float: none !important;\r\n}\r\n\r\n.site-footer .footer-widgets {\r\n    margin-top: 30px;\r\n    margin-bottom: 30px;\r\n}\r\n\r\n.show-more {\r\n    margin: 0px;\r\n    width: 100%;\r\n    padding: 0px;\r\n}\r\n\r\n.show-more .reveal-button {\r\n    width: 100%;\r\n}\r\n\r\n.wpb_wrapper .lab-blog-posts .blog-post-column {\r\n    margin-bottom: 20px;\r\n}\r\n\r\n.awards {\r\n    width: 100%;\r\n}\r\n\r\n.logos-holder.awards .client-logos-col {\r\n    width: 20% !important;\r\n}\r\n\r\n.title-divider {\r\n    margin: 25px 0;\r\n}\r\n\r\n.menu-catalog {\r\n    padding: 0px;\r\n}\r\n\r\n.restaurant {\r\n    padding: 0px;\r\n}\r\n\r\n.reserve {\r\n    margin: 0px;\r\n    padding-left: 15px !important;\r\n    padding-right: 15px !important;\r\n}\r\n\r\n.menu-row .vc_tta-panel-body {\r\n    padding-left: 0px !important;\r\n    padding-right: 0px !important;\r\n}\r\n\r\n.food-list p {\r\n    padding-right: 0px;\r\n}","laborator_custom_css_less":"@my-var: #ccc;\n@my-other-var: #fff;\n\n.any-container {\n\t.nested-container {\n\t\tcolor: @my-var;\n\t}\n}","laborator_custom_css_sass":"$color: #abc;\n\ndiv.example-el {\n\tcolor: lighten($color, 20%);\n}"}