{"laborator_custom_css":"\/* ===========================================================\r\nCustom modification only for TRAVEL Demo - START\r\n=========================================================== *\/\r\n\r\n\/* Pages: Title Color *\/\r\n.blog h1.page-heading--title,\r\n.tours-title h1,\r\n.tickets .section-title h1, \r\n.destinations-title.section-title h1 {\r\n\tcolor: #4484CE;\r\n}\r\n\r\n\/* Pages: Title Line Height *\/\r\n.page-heading--description p {\r\n\tline-height: 26px;\t\r\n}\r\n\r\n\/* Underline Color and Height *\/\r\n.wrapper a:after, footer.main-footer a:after {\r\n\tbackground-color: #FBCE00;\r\n}\r\n\r\n\/* Header: Background *\/\r\nheader.main-header {\r\n\tborder-bottom: 1px solid rgba(0,0,0,0.05);\r\n}\r\n\r\n\/* Header: Slider Bullets Height *\/\r\n.bullet-bar .tp-bullet {\r\n\theight: 2px;\t\r\n}\r\n\r\n\/* Header: Mobile Menu Overlay Color *\/\r\n.mobile-menu-wrapper.mobile-menu-fullscreen+.mobile-menu-overlay {\r\n\tbackground: rgba(68,132,206,0.9);\r\n}\r\n\r\n\/* Homepage: Services Spacing *\/\r\n.services-row {\r\n\tpadding: 50px 0;\r\n}\r\n\r\n\/* Homepage: Service Box Spacing *\/\r\n.service-box {\r\n\tpadding: 0 20px;\t\r\n\tline-height: 24px;\r\n}\r\n\r\n\/* Homepage: Service Box Icon *\/\r\n.service-box .retina-icon {\r\n\twidth: 64px;\r\n\tmargin: 0 auto;\r\n\tmargin-bottom: 25px;\r\n}\r\n\r\n\/* Homepage: News See More Button *\/\r\n.more-link {\r\n\tborder: none;\r\n\tposition: absolute;\r\n\ttop: 0px;\r\n\tright: 0px;\r\n\tmin-width: auto;\r\n}\r\n\r\n\/* Homepage: News See More Button *\/\r\n.more-link .show-more {\r\n\tpadding:0px;\r\n\tmargin: 0px;\r\n}\r\n\r\n\/* Homepage: News See More Button *\/\r\n.more-link .show-more .reveal-button {\r\n\tborder: none;\r\n}\r\n\r\n\/* Homepage: News See More Button *\/\r\n.more-link .show-more .reveal-button a {\r\n\tbackground: #FBCE00;\r\n\tborder-radius: 50px;\r\n\t-webkit-border-radius: 3px;\r\n\t-moz-border-radius: 3px;\r\n\tcolor: #222;\r\n\twidth: auto;\r\n\tpadding: 12px 25px;\r\n}\r\n\r\n\/* Homepage: News See More Button *\/\r\n.more-link .show-more .reveal-button a:hover {\r\n\tbackground: #ffda2f; \r\n}\r\n\r\n\/* Homepage: News See More Button *\/\r\n.more-link .show-more .reveal-button a:before {\r\n\tcontent: \"\u00bb\";\r\n\tmargin-left: 10px;\r\n\tfloat: right;\r\n\tline-height : 1\r\n}\r\n\r\n\/* Homepage: City Break *\/\r\n.homepage-city-break .wpb_wrapper .section-title {\r\n\ttext-align: center;\r\n\tpadding: 50px 0;\r\n}\r\n\r\n\/* Homepage: City Break Title *\/\r\n.homepage-city-break .wpb_wrapper .section-title h2 {\r\n\tcolor: #FFF;\r\n}\r\n\r\n\/* Homepage: City Break Paragraph *\/\r\n.homepage-city-break .wpb_wrapper .section-title p {\r\n\tcolor: #FFF;\r\n}\r\n\r\n\/* Homepage: News Spacing *\/\r\n.homepage-news {\r\n\tpadding: 35px 0 0 0;\r\n}\r\n\r\n\/* Homepage: News Title *\/\r\n.homepage-news .wpb_wrapper .section-title>h2 {\r\n\tmargin: 0px \r\n}\r\n\r\n\/* Homepage: Booking Widget:Start *\/\r\n.booking-widget #flexi_searchbox #b_searchboxInc {\r\n\tpadding-left: 0;\r\n\tpadding-right: 0;\r\n}\r\n\r\n\/* Homepage: Removed padding on the Widget class *\/\r\n.booking-widget .bos_searchbox_widget_class {\r\n    padding: 0;\r\n}\r\n\r\n\/* Layout changes for Booking.com Official Search Box plugin :START *\/\r\n.booking-widget #flexi_searchbox select {\r\n\tborder: none;\r\n\tpadding-left: 7px;\r\n\tpadding-right: 7px;\r\n\tborder-radius: 3px;\r\n\t-webkit-border-radius: 3px;\r\n\t-moz-border-radius: 3px;\r\n}\r\n\r\n.booking-widget #flexi_searchbox #b_searchboxInc .b_submitButton_wrapper {\r\n\tmargin-top: 7px; \r\n}\r\n\r\n.booking-widget #flexi_searchbox #b_searchboxInc #b_destination {\r\n\twidth: 100%;\r\n\tpadding: 15px !important;\t\r\n}\r\n\r\n.booking-widget #flexi_searchbox h4 {\r\n\tmargin-bottom: 10px;\r\n}\r\n\r\n.booking-widget #flexi_searchbox h3 {\r\n\tdisplay: none;\r\n}\r\n\r\n.booking-widget #flexi_searchbox #b_searchboxInc .b_submitButton_wrapper {\r\n\twidth: 10%;\r\n\tfloat: left;\r\n\tclear: none;\r\n\tpadding: 20px 0px 0px 15px;\r\n}\r\n\r\n.booking-widget #flexi_searchbox select {\r\n\tmargin-right: 10px;\r\n}\r\n\r\n.booking-widget .wpb_widgetised_column {\r\n\tmargin-bottom: 0px;\t\r\n\tpadding: 35px 0;\r\n}\r\n\/* Homepage: Booking Widget :END *\/\r\n\r\n\r\n\/* Homepage: Destinations Title*\/\r\n.homepage-destinations-title {\r\n\ttext-align: center;\r\n}\r\n\r\n\/* Homepage: Destinations Remove Extra Spacing *\/\r\n.homepage-destinations.lab-portfolio-items .portfolio-title-holder {\r\n\tmargin-bottom: 0px;\r\n}\r\n\r\n\/* Homepage: Destinations Border Radius *\/\r\n.homepage-destinations .portfolio-holder .thumb,\r\n.destinations .portfolio-holder .item-box.wow.animated .thumb .hover-state,\r\n.destinations .portfolio-holder .portfolio-item.masonry-portfolio-item .masonry-box .masonry-thumb {\r\n\tborder-radius: 3px;\t\r\n\t-webkit-border-radius: 3px;\r\n\t-moz-border-radius: 3px;\r\n}\r\n\r\n\/* Destinations: Remove Title *\/\r\n.destinations .portfolio-title-holder {\r\n\tdisplay: none;\t\r\n}\r\n\r\n\/* Homepage: Feature Block Title *\/\r\n.feature-block .text-block h2 {\r\n\tline-height: 1.3;\r\n\tmargin-top: 0px;\r\n}\r\n\r\n\/* Homepage: Feature Block Paragraph *\/\r\n.feature-block .text-block p {\r\n\tline-height: 1.8;\r\n}\r\n\r\n\/* Homepage: Feature Block  *\/\r\n.feature-block .text-block {\r\n    padding: 35px 100px;\r\n}\r\n\r\n\/* Blog: Center Section Title *\/\r\n.blog .page-heading--title-section {\r\n\tpadding: 30px 0px 10px 0px;\r\n\ttext-align: center;\r\n}\r\n\r\n\/* Blog: Hide Category *\/\r\n.blog-posts .post-item .post-details .post-meta.category {\r\n\tdisplay: none;\r\n}\r\n\r\n\/* Blog: Hide Underline *\/\r\n.blog-posts .post-item .post-details .post-title a:after {\r\n\tdisplay: none;\r\n}\r\n\r\n\/* Blog: Line Height *\/\r\n.blog-posts .post-item .post-details .post-title {\r\n\tline-height: 30px;\r\n}\r\n\r\n\/* Blog: Hide Post Icons *\/\r\n.blog-posts .post-item .post-details .post-meta i {\r\n\tdisplay: none;\r\n}\r\n\r\n\/* Blog: Date Font*\/\r\n.blog-posts .post-item .post-details .post-meta.date,\r\n.wpb_wrapper .lab-blog-posts .blog-post-entry .blog-post-content-container .blog-post-date {\r\n    letter-spacing: 2px;\t\r\n}\r\n\r\n\/* Blog: Details Margin *\/ \r\n.blog-holder .isotope-item .box-holder .post-info .details {\r\n\tmargin-top: 0px;\t\r\n}\r\n\r\n\/* Blog: Remove Post Border *\/\r\n.blog-posts .post-item.template-standard .post-details {\r\n\tborder-color: transparent;\r\n\tpadding: 23px 25px;\r\n\tbackground: #FFF;\r\n    border-bottom-left-radius: 3px;\r\n    border-bottom-right-radius: 3px;\r\n\tborder: 1px solid #EEE;\r\n\tborder-top: none;\r\n}\r\n\r\n\/* Blog: Remove Image Border *\/\r\n.blog-posts .post-item.template-standard .post-thumbnail {\r\n\tborder: none;\r\n}\r\n\r\n\/* Blog: Remove Blog Post Border  *\/\r\n.wpb_wrapper .lab-blog-posts .blog-post-entry .blog-post-content-container {\r\n    background: #FFF;\r\n\tborder: none;\r\n\tborder-bottom-left-radius: 3px;\r\n\tborder-bottom-right-radius: 3px;\r\n}\r\n\r\n\/* Blog: Blog Image Border Radius  *\/\r\n.wpb_wrapper .lab-blog-posts .blog-post-entry .blog-post-image img {\r\n\tborder-top-left-radius: 3px;\r\n\t-webkit-border-top-left-radius: 3px;\r\n\t-moz-border-top-left-radius: 3px;\r\n\tborder-top-right-radius: 3px;\t\r\n\t-webkit-border-top-right-radius: 3px;\t\r\n\t-moz-border-top-right-radius: 3px;\t\r\n}\r\n\r\n\/* Blog: Blog Image Border Radius  *\/\r\n.blog-posts .post-item.template-standard {\r\n\tborder-radius: 3px;\r\n\t-webkit-border-radius: 3px;\r\n\t-moz-border-radius: 3px;\r\n}\r\n\r\n\/* Blog: Remove Blog Post Border  *\/\r\n.wpb_wrapper .lab-blog-posts .blog-post-entry {\r\n\tborder: none;\r\n    box-shadow: 0px 5px 5px -5px rgba(0,0,0,0.1);\t\r\n\ttransition: all 0.3s;\r\n}\r\n\r\n\/* Blog: Remove Post Border  *\/\r\n.wpb_wrapper .lab-blog-posts .blog-post-entry:hover {\r\n    border: none;\r\n    box-shadow: 0px 15px 45px rgba(0,0,0,0.05);\t\r\n}\r\n\r\n\/* Blog: Border Radius for Hover Style *\/\r\n.hover-display {\r\n\tborder-radius: 3px;\r\n\t-webkit-border-radius: 3px;\r\n\t-moz-border-radius: 3px;\r\n}\r\n\r\n\/* Blog: Remove Post Border  *\/\r\n.wpb_wrapper .lab-blog-posts .blog-post-entry {\r\n\tborder-color: transparent;\r\n}\r\n\r\n\/* Blog Image Border  *\/\r\n.blog-posts .post-item .post-thumbnail a img {\r\n    border-top-left-radius: 3px;\r\n    border-top-right-radius: 3px;\r\n}\r\n\r\n\/* Blog Title Hover *\/\r\n.blog-holder .isotope-item .box-holder .post-info h2 a:hover {\r\n    color: #4484ce;\r\n}\r\n\r\n\/* Blog: Change Comment Holder Background *\/\r\n.single-blog-holder .comments-holder {\r\n\tbackground: #EEE;\r\n}\r\n\r\n\/* Blog: Comment Lines Border Color *\/\r\n.comment-form textarea {\r\n\tbackground-image: linear-gradient(#EFEFEF 1px, transparent 1px);\r\n\tborder-bottom-color: #EFEFEF !important;\r\n}\r\n\r\n.comment-form input, .comment-form textarea {\r\n\tborder-bottom-color: #EFEFEF;\t\r\n}\r\n\r\n\/* Blog: Comment Send Button *\/\r\n.form-submit .button {\r\n\tmargin: 0px;\r\n\tborder-radius: 3px;\r\n}\r\n\r\n\/* Blog: Comment Area *\/\r\n.single-post .post-comments--list .comment-respond {\r\n\tborder-radius: 3px;\r\n\tbox-shadow: 0px 5px 5px -5px rgba(0,0,0,0.1);\r\n}\r\n\r\n\/* Blog: Comment Line Height *\/\r\n.single-post .post-comments--list .comment .commenter-details .comment-text p {\r\n\tline-height: 1.5;\r\n}\r\n\r\n\/* Blog: Comments In Reply to Line color *\/\r\n.single-post .post-comments--list .comment .commenter-image .comment-connector {\r\n    border-color: #DDD;\r\n}\r\n\r\n\/* Destinations: Background Color *\/\r\n.destinations .hover-state {\r\n\tbackground: rgba(0,0,0,0.2);\r\n\topacity: 1;\r\n    -webkit-opacity: 1;\r\n    -moz-opacity: 1;\r\n    filter: alpha(opacity=100);\r\n}\r\n\r\n\/* Destinations: Center Title *\/\r\n.destinations-title {\r\n\ttext-align: center;\r\n}\r\n\r\n\/* Destinations: Item Background Color *\/\r\n.destinations .hover-state .info h3 {\r\n    opacity: 1;\r\n    -webkit-opacity: 1;\r\n    -moz-opacity: 1;\r\n    filter: alpha(opacity=100);\r\n    text-shadow: 0px 5px 25px rgba(0, 0, 0, 0.15);\r\n}\r\n\r\n\/* Tickets: Change Search Button *\/\r\n.tickets .ninja-forms-field.form-button {\r\n\twidth: 100%;\r\n\tbackground: #fbce00;\r\n}\r\n\r\n\/* Tickets: Fields *\/\r\n.tickets .ninja-forms-field {\r\n\tpadding: 10px;\r\n\tborder: none;\r\n\tcolor: #222;\r\n\tbackground: #EEE;\r\n\tborder: 1px solid rgba(255,255,255,0.2);\r\n}\r\n\r\n\/* Tickets: Title *\/\r\n.tickets .section-title h1 {\r\n\tcolor: #FFF;\r\n}\r\n\r\n\/* Tickets: Paragraphs *\/\r\n.tickets .section-title p {\r\n\tcolor: #FFF;\r\n}\r\n\r\n\/* Tickets: Unactive Tabs *\/\r\n.wpb-js-composer .tickets .vc_tta-color-white.vc_tta-style-flat .vc_tta-tab>a {\r\n    background-color: rgba(255,255,255,0.8);\t\r\n}\r\n\r\n\/* Tickets: Active Tab *\/\r\n.wpb-js-composer .tickets .vc_tta-color-white.vc_tta-style-flat .vc_tta-tab.vc_active>a {\r\n    background-color: #FFF;\t\t\r\n}\r\n\r\n\/* Remove the Underline *\/\r\n.main-header.menu-type-standard-menu .standard-menu-container div.menu>ul ul li a:after, \r\n.main-header.menu-type-standard-menu .standard-menu-container ul.menu ul li a:after {\r\n    background-color: transparent !important;\r\n}\r\n\r\n\/* Tours: Border Radius *\/\r\n.portfolio-holder .item-box .photo .on-hover,\r\n.portfolio-holder .item-box .photo img {\r\n\tborder-radius: 3px;\r\n\t-webkit-border-radius: 3px;\r\n\t-moz-border-radius: 3px;\r\n}\r\n\r\n\/* Tours: Filter Alignment *\/\r\n.portfolio-title-holder .pt-column {\r\n    margin: auto;\r\n}\r\n\r\n\/* Tours: Title  Alignment *\/\r\n.tours-title {\r\n\ttext-align: center;\t\r\n}\r\n\r\n\/* Tours: Filter Color when Active *\/\r\n.product-filter ul li.active a {\r\n    color: #4484ce;\r\n}\r\n\r\n\/* Tours: Title Color *\/\r\n.portfolio-holder .item-box .info h3 a {\r\n\tcolor: #222;\t\r\n}\r\n\r\n\/* Contact: Text Input Border Radius *\/ \r\n.contact-form input,\r\n.contact-form .send {\r\n\tborder-radius: 3px;\r\n\t-webkit-border-radius: 3px;\r\n\t-moz-border-radius: 3px;\r\n}\r\n\r\n\/* Contact: Text Input Border Radius *\/ \r\n.contact-form input {\r\n\tborder-top-left-radius: 0px;\r\n\t-webkit-border-top-left-radius: 0px;\r\n\t-moz-border-top-left-radius: 0px;\r\n\tborder-bottom-left-radius: 0px;\r\n\t-webkit-border-bottom-left-radius: 0px;\r\n\t-moz-border-bottom-left-radius: 0px;\r\n}\r\n\r\n\/* Contact: Label Border Radius *\/ \r\n.contact-form label {\r\n\tbackground: #FFF;\r\n\tborder: none;\r\n\tpadding: 12px;\r\n\tborder-top-left-radius: 3px;\r\n\t-webkit-border-top-left-radius: 3px;\r\n\t-moz-border-top-left-radius: 3px;\r\n\tborder-bottom-left-radius: 3px;\r\n\t-webkit-border-bottom-left-radius: 3px;\r\n\t-moz-border-bottom-left-radius: 3px;\r\n}\r\n\r\n\/* Contact: Label of Textarea Border Radius *\/ \r\n.contact-form .labeled-textarea-row label{\r\n\twidth: 100%;\r\n\tborder-top-right-radius: 3px;\r\n\t-webkit-border-top-right-radius: 3px;\r\n\t-moz-border-top-right-radius: 3px;\t\r\n}\r\n\r\n\r\n\/* Contact: Textarea Border Radius *\/ \r\n.contact-form .form-group .placeholder.ver-two {\r\n\tborder-top-left-radius: 3px;\t\r\n\t-webkit-border-top-left-radius: 3px;\t\r\n\t-moz-border-top-left-radius: 3px;\t\r\n\tborder-top-right-radius: 3px;\t\r\n\t-webkit-border-top-right-radius: 3px;\t\r\n\t-moz-border-top-right-radius: 3px;\t\r\n}\r\n\r\n\/* Contact: Textarea Border Radius *\/ \r\n.contact-form textarea {\r\n\tborder-bottom-left-radius: 3px;\t\r\n\t-webkit-border-bottom-left-radius: 3px;\t\r\n\t-moz-border-bottom-left-radius: 3px;\t\r\n\tborder-bottom-right-radius: 3px;\t\r\n\t-webkit-border-bottom-right-radius: 3px;\t\r\n\t-moz-border-bottom-right-radius: 3px;\t\r\n}\r\n\r\n\/* Contact: Add Spacing *\/\r\n.contact-form-area {\r\n\tpadding: 50px 0px;\t\r\n}\r\n\r\n\/* Footer: Background *\/\r\nfooter.main-footer {\r\n    background-color: #FFF !important;\r\n\tborder-top: 1px solid #EEE;\r\n}\r\n\r\n\r\n\/* Footer: Margin Bottom *\/\r\nfooter.main-footer .footer--widgets .widget li {\r\n\tpadding: 0px;\r\n\tmargin-bottom: 5px;\r\n}\r\n\r\n\/* Footer: Footer Color *\/\r\nfooter .footer--widgets ul li a {\r\n\tcolor: #666;\r\n}\r\n\r\n\/* Footer: Spacing *\/\r\n.site-footer .footer-widgets {\r\n\tmargin-bottom: 5px;\r\n}\r\n\r\n\/* Footer: Bottom Padding *\/\r\n.main-footer .footer-bottom-content {\r\n\tpadding: 15px 0 ;\r\n}\r\n\r\n\/* Pages: Padding *\/\r\n.tours-title .section-title,\r\n.tickets .section-title, \r\n.destinations-title.section-title {\r\n\tpadding: 50px 0;\r\n}\r\n\r\n\/* Homepage: Feature Block Tablet *\/\r\n@media screen and (max-width: 1400px) {\r\n\t.feature-block .wpb_single_image img {\r\n\t\tmax-width: none;\r\n\t\twidth: auto;\r\n\t}\t\r\n}\r\n\r\n\/* Homepage: News Button *\/\r\n@media screen and (max-width: 1200px) {\r\n\t.more-link {\r\n\t\tposition: relative;\r\n\t}\r\n}\r\n\r\n@media screen and (min-width: 1024px) {\r\n\t.booking-widget #flexi_searchbox select {\r\n\t\t-webkit-appearance: none;\r\n\t\t-moz-appearance: none;\r\n\t\tappearance: none;\r\n\t}\r\n}\r\n\r\n@media screen and (min-width: 992px) {\r\n\t\/* Homepage: Blog *\/\r\n\t.homepage-news .wpb_wrapper .lab-blog-posts .blog-post-column {\r\n\t\tmargin: 0px \r\n\t}\t\r\n\r\n\t\/* Homepage: Feature Block Tablet *\/\r\n\t.feature-block .text-block {\r\n\t\tpadding: 15px 40px;\r\n\t}\r\n}\r\n\r\n@media screen and (max-width: 768px) {\r\n\t\/* Footer Widgets on Mobile *\/\r\n\t.footer-widgets .widget-area.widgets--columned-layout>.widget {\r\n\t\tmargin-bottom: 20px;\r\n\t}\t\r\n}\r\n\r\n@media screen and (max-width: 768px) {\r\n\t\/* Homepage: Feature Block Mobile *\/\r\n\t.feature-block .text-block {\r\n\t\tpadding: 15px 20px;\r\n\t}\r\n\r\n\t\/* Contact: Send Button Width on Mobile *\/ \r\n\t.contact-form .send {\r\n\t\twidth: 100%;\r\n\t}\r\n\r\n\t\/* Footer Widgets on Mobile *\/\r\n\t.footer-widgets .widget-area.widgets--columned-layout>.widget {\r\n\t\twidth: 50%;\r\n\t\tfloat: left;\r\n\t}\t\r\n\t\r\n\t\/* Footer: Expand Footer Padding *\/\r\n\t.main-footer .footer-collapse-link {\r\n\t\tpadding: 10px;\r\n\t}\r\n\r\n\t\/* Footer: Expand Footer Dots *\/\r\n\t.main-footer .footer-collapse-link span {\r\n\t\twidth: 6px;\r\n\t\theight: 6px;\r\n\t}\t\r\n\r\n\t\/* Pages: Title holder *\/\r\n\t.blog .page-heading--title-section,\r\n\t.tours-title .section-title,\r\n\t.tickets .section-title, \r\n\t.destinations-title.section-title {\r\n\t\ttext-align: left;\r\n\t\tpadding: 20px 0px;\r\n\t\tmargin: 0px;\r\n\t}\r\n\t\r\n\t\/* Homepage: Posts Remove Bottom Margin *\/\r\n\t.homepage-news .wpb_wrapper .lab-blog-posts {\r\n\t\tmargin: 0px;\r\n\t}\r\n\t\r\n\t\/* Homepage: Posts Remove Padding and Margin *\/\r\n\t.homepage-news .wpb_wrapper .lab-blog-posts .blog-post-column {\r\n\t\tmargin-bottom: 20px;\r\n\t\tpadding: 0px;\r\n\t}\r\n\t\r\n\t\/* Homepage: Posts Remove Last Post Margin *\/\r\n\t.homepage-news .wpb_wrapper .lab-blog-posts .blog-post-column:nth-child(3) {\r\n\t\tmargin-bottom: 0px;\r\n\t}\t\r\n\t\r\n\t\/* Homepage: Posts See More Button *\/\r\n\t.more-link .show-more .reveal-button {\r\n\t\tmin-width: 100%;\t\r\n\t}\r\n\t\/* Homepage: Posts See More Button *\/\r\n\t.more-link .show-more {\r\n\t\tmargin: 20px 0;\t\r\n\t}\r\n\t\t\r\n\t\/* Homepage: Posts See More Button *\/\r\n\t.more-link {\r\n\t\tpadding: 0px;\t\r\n\t}\r\n\t\r\n\t\/* Homepage: Posts See More Button *\/\r\n\t.more-link .show-more .reveal-button a {\r\n\t\twidth: 100%;\r\n\t\ttext-align: left;\r\n\t}\r\n\t\r\n\t\/* Contact: Remove Spacing *\/\r\n\t.contact-form-area {\r\n\t\tpadding: 20px 0 0 0;\t\r\n\t}\r\n\t\r\n\t\/* Tours: Filter Alignment *\/\r\n\t.tours .product-filter {\r\n\t\ttext-align: left;\t\r\n\t}\r\n\r\n\t\/* Homepage: Services Spacing *\/\r\n\t.services {\r\n\t\tpadding: 20px 0;\r\n\t}\r\n\t\r\n\t\/* Homepage: Service Box Spacing *\/\r\n\t.service-box {\r\n\t\tpadding: 0;\t\r\n\t\tline-height: 24px;\r\n\t}\t\r\n\r\n\t\/* Header: Menu Bar Color *\/\r\n\t.main-header.menu-type-standard-menu .standard-menu-container.menu-skin-main .menu-bar .ham,\r\n\t.main-header.menu-type-standard-menu .standard-menu-container.menu-skin-main .menu-bar .ham:after, \r\n\t.main-header.menu-type-standard-menu .standard-menu-container.menu-skin-main .menu-bar .ham:before {\r\n\t  background: #4484CE;\r\n\t}  \r\n\t\r\n\t\/* Homepage: Booking Button Full Width *\/\r\n\t.booking-widget #flexi_searchbox #b_searchboxInc .b_submitButton_wrapper {\r\n\t\twidth: 100%;\r\n\t\tpadding: 0px;\r\n\t}\r\n\t\r\n\t\/* Homepage: Booking Button Full Width *\/\r\n\t.booking-widget #flexi_searchbox #b_searchboxInc .b_submitButton_wrapper .b_submitButton {\r\n\t\twidth: 100%;\t\r\n\t}\r\n\t\r\n\t\/* Homepage: Booking Widget Remove Bottom Margin *\/\r\n\t.booking-widget .blog-sidebar .sidebar-box-holder {\r\n\t\tmargin: 0px;\t\r\n\t}\r\n\t\r\n\t\/* Homepage: Booking Widget *\/\r\n\t.booking-widget #flexi_searchbox #b_searchboxInc {\r\n\t\tpadding: 0px;\t\r\n\t}\r\n\r\n\t\/* Header: Search Color *\/\r\n\t.mobile-menu-wrapper .mobile-menu-container .search-form label {\r\n\t\tcolor: #FFF;\t\r\n\t}\r\n\r\n\t.search-field::-webkit-input-placeholder { \r\n\t\tcolor: #FFF;\r\n\t}\r\n\t.search-field::-moz-placeholder { \r\n\t  \tcolor: #FFF;\r\n\t}\r\n\t.search-field:-ms-input-placeholder { \r\n\t \t color: #FFF;\r\n\t}\r\n\t.search-field:-moz-placeholder { \r\n\t \t color: #FFF;\r\n\t}\r\n\t\r\n\t\/* Homepage: Service Box Icon *\/\r\n\t.service-box .retina-icon {\r\n\t\twidth: 32px;\r\n\t}\r\n\t\r\n\t\/* Destinations: Center Title *\/\r\n\t.destinations-title.section-title {\r\n\t\tpadding-bottom: 0px;\r\n\t}\t\r\n}\r\n\r\n\/* ===========================================================\r\nCustom modification only for TRAVEL Demo - END\r\n=========================================================== *\/\r\n\r\n\/* ===========================================================\r\nUser CSS modifications\r\n=========================================================== *\/\r\n\r\n.example {\r\n \tcolor: red !important;\r\n}","laborator_custom_css_lg":"","laborator_custom_css_md":"","laborator_custom_css_sm":"","laborator_custom_css_xs":"","laborator_custom_css_less":"@my-var: #ccc;\n@my-other-var: #fff;\n\n.any-container {\n\t.nested-container {\n\t\tcolor: @my-var;\n\t}\n}","laborator_custom_css_sass":"$color: #abc;\n\ndiv.example-el {\n\tcolor: lighten($color, 20%);\n}"}